syntax = "proto3";

import "google/protobuf/empty.proto";
//option java_multiple_files = true;
message BankAccount {

    message Token {
        string member_id = 1;
        string account_id = 2;
    }

    // One-time encrypted authorization for an account
    message TokenAuthorization {
        BankAuthorization authorization = 1;
    }

    // Source account managed by a coop bank
    message Bank {
        string bank_id = 1;
    }

    // SWIFT transfer
    message Swift {
        string bic = 1;     // BIC code AAAABBCCDD
        string account = 2;
    }

    // SEPA transfer.
    message Sepa {
        string iban = 1;    // International Bank Account Number
        string bic = 2;     // Bic code. Optional, except for non EEA countries
    }

    // ACH transfer
    message Ach {
        string routing = 1; // Routing number
        string account = 2;
    }

    // Faster Payments Service transfer (UK)
    message FasterPayments {
        string sort_code = 1;
        string account_number = 2;
    }

    // Custom authorization
    message Custom {
        string bank_id = 1;
        string payload = 2;
    }

    oneof account {
        Token token = 1;
        TokenAuthorization token_authorization = 2;
        Swift swift = 3;
        Sepa sepa = 4;
        Ach ach = 5;
        Bank bank = 6;
        FasterPayments faster_payments = 7;
        Custom custom = 8;
    }

    map<string, string> metadata = 9;
    AccountFeatures account_features = 10;
}

message AccountFeatures {
    bool supports_payment = 1;            // **DEPRECATED** can both send and receive payments
    bool supports_information = 2;        // can get info, e.g., get balance
    bool requires_external_auth = 3;
    bool supports_send_payment = 4;       // can send payments from account
    bool supports_receive_payment = 5;    // can receive payments to account
}

message BankAuthorization {
    string bank_id = 1;  // "TBUK"
    repeated SealedMessage accounts = 2; //
}

message SealedMessage {
    string ciphertext = 1;              // Base64url encoded ciphertext.

    oneof method {
        NoopMethod noop = 4;              // Noop encryption
        RsaMethod rsa = 6;                // RSA blocks method
        RsaAesMethod rsa_aes = 7;         // RSA/AES Method specific metadata
    }

    // Sifreleme yapmadan text hali ile
    message NoopMethod {
    }

    // Rsa method ile encrypt edilecekse, - simdilik gerek yok
    message RsaMethod {
        string key_id = 1;
        string algorithm = 2;             // RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        string signature = 3;             // Base64url encoded ciphertext signature.
        string signature_key_id = 4;      // the key-id of the signature
    }

    // RsaAes ile sifreleme
    message RsaAesMethod {
        string rsa_key_id = 1;            // The id of the key used for encryption
        string rsa_algorithm = 2;         // RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        string aes_algorithm = 3;         // AES/CBC/PKCS5Padding
        string encrypted_aes_key = 5;     // Base64url encoded rsa-encrypted aes key
        string signature = 6;             // Base64url encoded ciphertext signature.
        string signature_key_id = 7;      // the key-id of the signature
    }
}